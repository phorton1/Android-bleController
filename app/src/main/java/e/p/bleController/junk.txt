package e.p.bleController;

import androidx.appcompat.app.AppCompatActivity;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothClass;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothGattCharacteristic;
import android.bluetooth.BluetoothGattService;
import android.bluetooth.BluetoothManager;
import android.bluetooth.BluetoothProfile;
import android.bluetooth.le.BluetoothLeScanner;
import android.bluetooth.le.ScanCallback;
import android.bluetooth.le.ScanResult;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.TextView;
import android.widget.Toast;

import java.util.List;

public class MainActivity extends AppCompatActivity {

    private BluetoothAdapter mBluetoothAdapter;
    private BluetoothLeScanner mBluetoothLeScanner;

    private static final int REQUEST_ENABLE_BT = 1;
    // private LeDeviceListAdapter mLeDeviceListAdapter;

    private static final long SCAN_PERIOD = 20000;
    private boolean mScanning;
    private Handler mHandler;
    private BluetoothGatt mGatt = null;
    private BluetoothDevice mTumblerDevice = null;
    private TextView mMonitorTextView = null;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        Log.d("blec","MainActivity::oonCreate() called");

        // Remove the "notification" bar - the system notifications pull down bar at the top
        // Note that the "title" of the app is called the "action bar" and was changed in themes.xml
        // from Theme.MaterialComponents.DayNight.DarkActionBar to Theme.MaterialComponents.DayNight.NoActionBar


        this.requestWindowFeature(Window.FEATURE_NO_TITLE);

        View decorView = getWindow().getDecorView();
        decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE
                | View.SYSTEM_UI_FLAG_FULLSCREEN
                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);

        // this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        this.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mMonitorTextView = findViewById(R.id.terminalOutput);
        mMonitorTextView.setMovementMethod(new ScrollingMovementMethod());
        mMonitorTextView.append("\nstarted ...");

        mHandler = new Handler();
        if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE))
        {
            Toast.makeText(this, "BLE Not Supported", Toast.LENGTH_SHORT).show();
            finish();
        }
        Log.d("blec","system has BLE");

        // stuff goes here


        final BluetoothManager bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
        mBluetoothAdapter = bluetoothManager.getAdapter();

        if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {
            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
            startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);
        }
        Log.d("blec","got bluetoothManager");

        mBluetoothLeScanner = mBluetoothAdapter.getBluetoothLeScanner();

        scanLeDevice(true);

    }   // onCreate



    private ScanCallback mLeScanCallback = new ScanCallback() {
        @Override
        public void onScanResult(int callbackType, ScanResult result) {
            Log.d("blec","found device: " + result.getDevice().getName() + " address=" + result.getDevice().getAddress());
            if (mTumblerDevice == null  &&
                result.getDevice() != null &&
                result.getDevice().getName() != null &&
                result.getDevice().getName().equals("ELEGOO BT16"))
            {
                Log.d("blec","found Tumbler " + result.getDevice().getName() + " address=" + result.getDevice().getAddress());
                mTumblerDevice = result.getDevice();
                connectToDevice(mTumblerDevice);
            }
        }
    };


    private void scanLeDevice(final boolean enable) {

        Log.d("blec","scanLeDevice(" + enable + ")");

        if (enable) {
            mHandler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    mScanning=false;
                    Log.d("blec","stopScan(1)");
                    mBluetoothLeScanner.stopScan(mLeScanCallback);
                }
            },SCAN_PERIOD);

            mScanning = true;
            Log.d("blec","startScan()");
            mBluetoothLeScanner.startScan(mLeScanCallback);

        }else {
            mScanning = false;
            Log.d("blec","stopScan(2)");
            mBluetoothLeScanner.stopScan(mLeScanCallback);

        }
    }

    public void connectToDevice(BluetoothDevice device) {
        Log.d("blec","connectToDevice(" + device.getName() + ")");
        if (mGatt == null)
        {
            scanLeDevice(false);
            Log.d("blec","caling connectGatt()");
            mGatt = device.connectGatt(this, false, gattCallback);
            Log.d("blec","connectGatt() returned " + mGatt);
        }
    }

    private final BluetoothGattCallback gattCallback = new BluetoothGattCallback()
    {
        @Override
        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
            Log.d("blec", "onConnectionStateChange Status: " + status + " newState=" + newState);
            switch (newState) {
                case BluetoothProfile.STATE_CONNECTED:
                    Log.d("blec", "STATE_CONNECTED");
                    gatt.discoverServices();
                    break;
                case BluetoothProfile.STATE_DISCONNECTED:
                    Log.d("blec", "STATE_DISCONNECTED");
                    break;
                default:
                    Log.d("blec", "STATE_OTHER");
            }
        }

        @Override
        public void onServicesDiscovered(BluetoothGatt gatt, int status) {

            List<BluetoothGattService> services = mGatt.getServices();
            // Log.d("blec","services=" + services.toString());
            for (int i=0; i<services.size(); i++)
            {
                BluetoothGattService svc = services.get(i);
                Log.d("blec","   Service[" + i + "]-" + svc.getUuid().toString());
                List<BluetoothGattCharacteristic> atts = svc.getCharacteristics();
                for (int j=0; j<atts.size(); j++) {
                    BluetoothGattCharacteristic att = atts.get(j);
                    Log.d("blec", "      Characteristic(" + j + ")  " + att.getWriteType() + ":" + att.getUuid().toString());
                }
            }

            BluetoothGattCharacteristic remoteReadChar = services.get(2).getCharacteristics().get(0);
            boolean rslt  = gatt.readCharacteristic(remoteReadChar);
            Log.d("blec","gatt.readCharacteristic returned " + rslt);

            if (gatt.setCharacteristicNotification(remoteReadChar, true) == true)
            {
                Log.d("blec","gatt.setCharacteristicNotification SUCCESS!");
            }
            else
                {
                Log.d("blec","gatt.setCharacteristicNotification FAILURE!");
            }
        }


        @Override
        public void onCharacteristicRead(
                final BluetoothGatt gatt,
                final BluetoothGattCharacteristic characteristic, int status)
        {
            // Log.d("blec", "onCharacteristicRead() = " + characteristic.getStringValue(0));

            mMonitorTextView.append("\n" + characteristic.getStringValue(0));

        }


        @Override
        public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic)
        {
            // Log.d("blec", "onCharacteristicChanged() = " + characteristic.getStringValue(0));
            boolean rslt  = gatt.readCharacteristic(characteristic);
            // Log.d("blec","gatt.readCharateric(2) returned " + rslt);
        }

    };







}   // class MainActivity